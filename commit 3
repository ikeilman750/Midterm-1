@@ -0,0 +1,195 @@
#include <iostream>
using namespace std;

//The constant variables here are used to define the min/max range for 
const int MIN_NR = 10, MAX_NR = 99, MIN_LS = 5, MAX_LS = 20;


class DoublyLinkedList {

//Here's the node structure, made to store data and pointers 
private:
struct Node {
int data; //integer balue data, which is the value/identifier of each node
Node* prev; //sets pointer back 1
Node* next; //sets pointer forward 1

Node(int val, Node* p = nullptr, Node* n = nullptr) { //Node constructor, with the same 3 things set; value, set pointer back, set pointer forward
data = val;
prev = p;
next = n;
}
};



Node* head; //first node
Node* tail; //last node


public:
DoublyLinkedList() { head = nullptr; tail = nullptr; } //Constructor that creates an empty list (initializes the head and tail pointers and makes them null.)
void insert_after(int value, int position) { //Inserts  a new node with whatever "value" is set while calling
if (position < 0) { //Makes sure nothing bad happens
cout << "Position must be >= 0." << endl;
return;
}


Node* newNode = new Node(value); //set your own value to create a new node with


if (!head) { //checks if the head is set to null (probably means list is empty?)
head = tail = newNode; //creates a new node to act as both the new head and tail
return;
}


Node* temp = head;
for (int i = 0; i < position && temp; ++i)
temp = temp->next; //keeps moving temp to the next node, until it reaches said position


if (!temp) { //if temp is null, then the position is higher than the number of nodes inside the list, most liekly.
cout << "Position exceeds list size. Node not inserted.\n";
delete newNode; // since nothing ccan be inserted, the new node is just deleted
return;
}


newNode->next = temp->next; // if things go fine, then the newNode should go right after temp
newNode->prev = temp; //the previous should be temp


if (temp->next) 
temp->next->prev = newNode; //the node after temp should be linked to newNode
else //here's for if temp was the last node/tail
tail = newNode; //tail set to newNode
temp->next = newNode;
}


void delete_val(int value) { //deletes the first node it can find with the given value
if (!head) return; //if it can't find anything, then nothing should happen


Node* temp = head; 
while (temp && temp->data != value)
temp = temp->next; //looks for value
if (!temp) return; //nothing is found
if (temp->prev) 
temp->prev->next = temp->next; //skips over temp
else //if temp is head
head = temp->next;
if (temp->next) //temp isnt the last(?)
temp->next->prev = temp->prev;
else //if temp is the tail
tail = temp->prev;
delete temp; //mo more temp
}


void delete_pos(int pos) {
if (!head) {
cout << "List is empty." << endl;
return;
}
if (pos == 1) {
pop_front();
return;
}
Node* temp = head;
for (int i = 1; i < pos; i++){
if (!temp) {
cout << "Position doesn't exist." << endl;
return;
}
else
temp = temp->next;
}
if (!temp) {
cout << "Position doesn't exist." << endl;
return;
}
if (!temp->next) {
pop_back();
return;
}
Node* tempPrev = temp->prev;
tempPrev->next = temp->next;
temp->next->prev = tempPrev;
delete temp;
}
void push_back(int v) {
Node* newNode = new Node(v);
if (!tail)
head = tail = newNode;
else {
tail->next = newNode;
newNode->prev = tail;
tail = newNode;
}
}
void push_front(int v) {
Node* newNode = new Node(v);
if (!head)
head = tail = newNode;
else {
newNode->next = head;
head->prev = newNode;
head = newNode;
}
}
void pop_front() {
if (!head) {
cout << "List is empty." << endl;
return;
}
Node * temp = head;
if (head->next) {
head = head->next;
head->prev = nullptr;
}
else
head = tail = nullptr;
delete temp;
}
void pop_back() {
if (!tail) {
cout << "List is empty." << endl;
return;
}
Node * temp = tail;
if (tail->prev) {
tail = tail->prev;
tail->next = nullptr;
}
else
head = tail = nullptr;
delete temp;
}
~DoublyLinkedList() {
while (head) {
Node* temp = head;
head = head->next;
delete temp;
}
}
void print() {
Node* current = head;
if (!current) {
cout << "List is empty." << endl;
return;
}
while (current) {
cout << current->data << " ";
current = current->next;
}
cout << endl;
}
void print_reverse() {
Node* current = tail;
if (!current) {
cout << "List is empty." << endl;
return;
}
while (current) {
cout << current->data << " ";
current = current->prev;
}
cout << endl;
}
};
int main() {
cout << MIN_NR + MIN_LS + MAX_NR + MAX_LS; // dummy statement to avoid
compiler warning
return 0;
}
